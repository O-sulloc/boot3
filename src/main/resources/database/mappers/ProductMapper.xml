<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.jh.boot3.product.ProductMapper">
	<select id="getDetail" resultMap="getJoin" parameterType="ProductVO">
		SELECT P.*, F.*
		FROM PRODUCT P
			LEFT OUTER JOIN
			PRODUCTFILES F
			USING (PRODUCTNUM)
		WHERE PRODUCTNUM=#{productNum}
	</select>

	<select id="getTotalCount" resultType="java.lang.Long" parameterType="Pager">
		SELECT COUNT(PRODUCTNUM) FROM PRODUCT
		WHERE PRODUCTNUM>0 
			<if test="id != null">
				AND ID=#{id}
			</if>
			and 
			<choose>
				<when test="kind=='name'">
					PRODUCTNAME
				</when>
				<otherwise>
					PRODUCTDETAIL
				</otherwise>
			</choose> 
			LIKE CONCAT('%', #{search}, '%')
	</select>

	<!-- 일반적인 회원이 list보고 싶을 때 / 셀러가 자기가 등록한 리스트 보고 싶을때 -->
	<select id="getList" parameterType="Pager" resultMap="getJoin">
		SELECT P.*, F.*
		FROM (
				SELECT * FROM PRODUCT 
				WHERE PRODUCTNUM >0 

				<choose>
					<when test="id != null">
						and ID=#{id}
						<!-- id가 널값이 아니면, 즉 셀러면, 셀러가 쓴 글만 조회해 -->
					</when>
					<otherwise>
						and sale=1
						<!-- 셀러가 아니면 판매중인 제품만 볼 수 있도록 -->
					</otherwise>
				</choose>
	
				AND
				<choose>
					<when test="kind=='name'">
						PRODUCTNAME
					</when>
					<otherwise>
						PRODUCTDETAIL
					</otherwise>
				</choose> 
				LIKE CONCAT('%', #{search}, '%')
				ORDER BY PRODUCTNUM DESC 
				LIMIT #{startRow}, #{perPage}
			) P
			LEFT OUTER JOIN
			PRODUCTFILES F
			USING (PRODUCTNUM)
	</select>
	
	<resultMap type="ProductVO" id="getJoin">
		<id column="productNum" property="productNum"/>
		<result column="productName" property="productName"/>
		<result column="productPrice" property="productPrice"/>
		<result column="productCount" property="productCount"/>
		<result column="productDetail" property="productDetail"/>
		<result column="id" property="id"/>
		<result column="sale" property="sale"/>
		<collection property="productFilesVOs" javaType="List" ofType="ProductFilesVO">
			<id column="fileNum" property="fileNum"/>
			<result column="fileName" property="fileName"/>
			<result column="oriName" property="oriName"/>
		</collection>
	</resultMap>

	<insert id="setFileAdd" parameterType="ProductFilesVO">
		INSERT INTO PRODUCTFILES (FILENUM, PRODUCTNUM, FILENAME, ORINAME)
		VALUE (NULL, #{productNum}, #{fileName}, #{oriName})
	</insert>

	<insert id="setAdd" parameterType="ProductVO" useGeneratedKeys="true" keyProperty="productNum">
		INSERT INTO PRODUCT (PRODUCTNUM, PRODUCTNAME, PRODUCTPRICE, PRODUCTCOUNT, PRODUCTDETAIL, SALE, ID)
		VALUES (#{productNum}, #{productName}, #{productPrice}, #{productCount}, #{productDetail}, #{sale}, #{id})
	</insert>
	
</mapper>